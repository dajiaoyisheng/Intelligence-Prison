<template>
  <div id="prisonmanagement">
    <!-- 左 -->
    <section class="aside-l fl inbl">
      <div class="h aside-l-h clearfix">
        <div class="l fl">
          <img :src="images.exportgroup" alt>
          <img :src="images.importgroup" alt>
        </div>
        <div class="r fr">
          <img :src="images.add" @click="addTreeNode()" alt="添加">
          <img :src="images.edit" @click="editTreeNode()" alt="编辑">
          <img :src="images.del" @click="delTreeNode()" alt="删除">
        </div>
      </div>

      <div class="left-tree">
        <v-tree ref="leftTree" :tree-data="Prisonareatree" v-on:handle-node-click="handleNodeClick"></v-tree>
      </div>
    </section>
    <!-- 中 -->
    <section class="aside-r fr inbl">
      <div class="h clearfix">
        <div class="aside-r-h-l fl inbl clearfix">
          <div class="l fl">
            <img :src="images.exportgroup" title="导出">
            <el-upload
              style="display: inline-block;"
              ref="upload"
              action
              :on-change="handleFileListChange"
              :file-list="fileList"
              :auto-upload="false"
              :show-file-list="false"
              title="导入平面图"
            >
              <img :src="images.importgroup">
            </el-upload>
            <img :src="images.save" @click="tojson()" title="保存">
          </div>
          <div class="r fr clearfix">
            <img :src="images.del" title="删除">
            <!-- <img :src="images.cancel" title="撤销" @click="cUndo()">
            <img :src="images.renew" title="重做" @click="cRedo()">-->
            <img :src="images.div" @click="draw('Rectangle')" title="矩形">
            <img :src="images.polygon" title="多边形">
            <img :src="images.oval" @click="draw('Ellipse')" title="椭圆">
            <img :src="images.label" @click="draw('text')" title="标签">
            <!-- <img :src="images.camera" @click="drawCamera()" title="摄像头"> -->
            <span class="text-color-wrap">
              <img :src="images.textA" title="文本颜色">
              <el-color-picker
                :popper-class="'color-picker-drop'"
                v-model="textColor"
                @change="changeTextColor"
              ></el-color-picker>
            </span>
            <span class="text-color-wrap">
              <img :src="images.colorborder" title="容器框颜色">
              <el-color-picker
                :popper-class="'color-picker-drop'"
                v-model="strokeStyle"
                @change="changeBorderColor"
              ></el-color-picker>
            </span>
          </div>
        </div>
        <div class="aside-r-h-r fr text-center">
          <el-button class="search-btn" size="small">保存</el-button>
        </div>
      </div>

      <div class="main">
        <div class="l fl inbl">
          <div ref="canvasContainer" class="actionImage">
            <!-- 画图区域 -->
            <div ref="canvas" id="canvas"></div>
          </div>
        </div>
        <div class="r fr inbl">
          <div class="t line-word" title="对象">
            <span></span>
            <v-tree
              ref="rightTree"
              :draggable="true"
              :tree-data="PrisonareaObjtree"
              :default-expand-all="true"
              v-on:handle-node-click="handleObjectNodeClick"
              v-on:handle-drag-start="handleDragStart"
              v-on:handle-drag-end="handleDragEnd"
            ></v-tree>
          </div>

          <div class="d line-word" title="属性">
            <span></span>
            <p>
              <b>区域属性</b>
            </p>
            <p>
              <span>编码:</span>
              <span class="value" v-text="objectInfo.pri_code"></span>
            </p>
            <p>
              <span>名称:</span>
              <span class="value" v-text="objectInfo.name"></span>
            </p>
            <p>
              <span>位置:</span>
              <span class="value" v-text="objectInfo.position"></span>
            </p>
            <p>
              <span>角度:</span>
              <span class="value">
                <input v-model="objectInfo.angle" style="width: 20px;">
              </span>
            </p>
            <p>
              <span>备注:</span>
              <span class="value"></span>
            </p>
          </div>
        </div>
      </div>
    </section>
  </div>
</template>

<script>
import vTree from "@/components/commons/tree.vue";

import add from "@/assets/add.png";
import del from "@/assets/del-g.png";
import edit from "@/assets/edit-g.png";
import save from "@/assets/save.png";
import cancel from "@/assets/cancel.png";
import renew from "@/assets/renew.png";
import div from "@/assets/div.png";
import polygon from "@/assets/polygon.png";
import oval from "@/assets/oval.png";
import label from "@/assets/label.png";
import camera from "@/assets/camera.png";
import camera0 from "@/assets/camera0.png";
import review from "@/assets/review.png";
import textA from "@/assets/text-a.png";
import colorborder from "@/assets/colorborder.png";
import exportgroup from "@/assets/exportgroup.png";
import importgroup from "@/assets/importgroup.png";

import Draw from "@/draw/action";

export default {
  components: {
    vTree
  },
  data() {
    return {
      maxexpandId: 95,
      images: {
        add: add,
        del: del,
        edit: edit,
        save: save,
        cancel: cancel,
        renew: renew,
        div: div,
        polygon: polygon,
        oval: oval,
        label: label,
        camera: camera,
        review: review,
        textA: textA,
        colorborder: colorborder,
        exportgroup: exportgroup,
        importgroup: importgroup
      },
      textColor: "#409EFF",
      borderColor: "#409EFF",
      drawObj: null,
      lineWidth: 1,
      strokeStyle: "#ff0000",
      shapeType: "rect",
      fileList: [],
      isDrawCamera: false,
      backgroundImage: null,
      Prisonareatree: [],
      PrisonareaObjtree: [],
      selectedTreeObj: null, //要编辑的左侧树节点
      objectInfo: {}, //选中的父对象
      message: "监区管理",
      cameraImg: new Image(),
      startDragNode: false, //是否拖动节点
      draggingNode: null, //被拖动的节点
      mouseOveredGraph: null, //鼠标移动到的图形
      mouseClickedGraph: null, //鼠标点击的图形
      relationships: {}, //存储对象和图形的关系
      currUUID: null //当前选中图形的uuid
    };
  },
  created: function() {
    // 加载监狱树
    this.$get("/getPrisonareatree")
      .then(res => {
        if (res.status === 0) {
          this.Prisonareatree = res.data;
        }
      })
      .catch(function(error) {
        console.log(error);
      })
      .then(function() {});
  },
  methods: {
    tojson() {
      let json = this.drawObj.toJSON();
      console.log(json);
    },
    //拖拽节点开始
    handleDragStart(node, ev) {
      this.startDragNode = true;
    },
    //拖拽节点结束
    handleDragEnd(draggingNode, dropNode, dropType, ev) {
      //拖拽的对象
      this.draggingNode = draggingNode;
    },
    //点击左侧树节点
    handleNodeClick(data, checkedNode, indeterminate) {
      this.PrisonareaObjtree = [data];
      this.selectedTreeObj = checkedNode;
    },
    //点击右侧树节点
    handleObjectNodeClick(data, checkedNode, indeterminate) {
      this.objectInfo = data;
    },
    //添加左侧树节点
    addTreeNode() {
      let _this = this;
      if (this.selectedTreeObj == null) {
        this.$alert("请先选择树节点", {
          confirmButtonText: "确定",
          showClose: false
        });
        return false;
      }

      let type = this.selectedTreeObj.data.type;
      if (type == "camera") {
        this.$alert("当前节点不能添加子节点", {
          confirmButtonText: "确定",
          showClose: false
        });
        return false;
      }

      this.$prompt("请输入节点名称", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        inputPattern: /\S+/,
        inputErrorMessage: "输入格式不正确"
      })
        .then(({ value }) => {
          // 调用添加接口
          let data = {
            id: "0030",
            label: value,
            icon: "el-icon-message",
            isWarning: false,
            type: "area",
            pri_code: "0030",
            name: value,
            position: value
          };
          _this.$refs.leftTree.append(data, _this.selectedTreeObj);
          _this.selectedTreeObj = null;
        })
        .catch(() => {
          //取消输入
          this.$message({
            type: "info",
            message: "您已取消添加节点"
          });
          _this.selectedTreeObj = null;
        });
    },
    //编辑左侧树节点
    editTreeNode() {
      let _this = this;
      if (this.selectedTreeObj == null) {
        this.$alert("请先选择树节点", {
          confirmButtonText: "确定",
          showClose: false
        });
        return false;
      }

      let data = _this.selectedTreeObj.data;

      this.$prompt(data.label, "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        inputPattern: /\S+/,
        inputErrorMessage: "输入格式不正确"
      })
        .then(({ value }) => {
          // 调用编辑接口
          data.label = value;
          data.name = value;
          data.position = value;

          let key = _this.$refs.leftTree.getCurrentKey();
          _this.$refs.leftTree.updateKeyChildren(key, data);
          _this.selectedTreeObj = null;
        })
        .catch(() => {
          //取消输入
          this.$message({
            type: "info",
            message: "您已取消修改节点"
          });
          _this.selectedTreeObj = null;
        });
    },
    //删除左侧树节点
    delTreeNode() {
      let _this = this;
      if (this.selectedTreeObj == null) {
        this.$alert("请先选择树节点", {
          confirmButtonText: "确定",
          showClose: false
        });
        return false;
      }

      this.$confirm("您确定要删除这个节点吗?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning"
      })
        .then(() => {
          //掉删除接口
          _this.$refs.leftTree.remove(_this.selectedTreeObj);
          _this.selectedTreeObj = null;
          _this.$message({
            type: "success",
            message: "删除成功!"
          });
        })
        .catch(() => {
          _this.selectedTreeObj = null;
          _this.$message({
            type: "info",
            message: "已取消操作"
          });
        });
    },
    submitUpload() {
      this.$refs.upload.submit();
    },
    setNodeRelationed(nodes, pri_code, uuid) {
      let _this = this;
      for (let i = 0; i < nodes.length; i++) {
        let element = nodes[i];
        if (element.pri_code == pri_code) {
          element["relationed"] = "relationed";
          if (uuid != undefined) {
            element["shapeUuid"] = uuid;
          }
        }
        if (element.children) {
          _this.setNodeRelationed(element.children, pri_code, uuid);
        }
      }
    },
    deleteNodeRelationed(nodes, pri_code) {
      let _this = this;
      for (let i = 0; i < nodes.length; i++) {
        let element = nodes[i];
        if (element.pri_code == pri_code) {
          delete element["relationed"];
        }
        if (element.children) {
          _this.deleteNodeRelationed(element.children, pri_code);
        }
      }
    },
    handleFileListChange(file, fileList) {
      let _this = this;
      //创建一个reader
      let reader = new FileReader();
      //将图片转成base64格式
      reader.readAsDataURL(file.raw);
      reader.onload = function(event) {
        var base64txt = (_this.backgroundImage = event.target.result);
        _this.$refs.canvasContainer.style.backgroundImage =
          "url(" + base64txt + ")";
      };
    },
    checkBackgroundImage() {
      this.$alert("请先导入平面图", {
        confirmButtonText: "确定",
        showClose: false
      });
    },
    draw(type) {
      if (this.backgroundImage !== null) {
        this.shapeType = type;
        this.startDraw();
      } else {
        this.checkBackgroundImage();
      }
    },
    drawCamera() {
      if (this.backgroundImage !== null) {
        this.isDrawCamera = true;
      } else {
        this.checkBackgroundImage();
      }
    },
    startDraw() {
      this.drawObj.setShape(this.strokeStyle, this.shapeType);
    },
    //更改文字颜色
    changeTextColor(curTextColor) {
      console.log(`changeTextColor:`, curTestColor);
    },
    //更改图形边框颜色
    changeBorderColor(curBorderColor) {
      if (this.mouseClickedGraph) {
        let uuid = this.mouseClickedGraph.getAttr("uuid");
      }
    }
  },
  watch: {
    objectInfo: {
      handler(info) {
        if (info.type == "camera") {
          let shapeUuid = info.shapeUuid;
          let camera = this.drawObj.getShapeByUUID(shapeUuid, "Camera");
          camera.setAngle(parseInt(info.angle));
          this.drawObj.redraw();
        }
      },
      deep: true
    }
  },
  mounted() {
    let _this = this;
    let canvasContainerRect = this.$refs.canvasContainer.getBoundingClientRect();

    this.$refs.canvas.style.width = canvasContainerRect.width + "px";
    this.$refs.canvas.style.height = canvasContainerRect.height + "px";
    this.drawObj = new Draw(
      "canvas",
      canvasContainerRect.width,
      canvasContainerRect.height,
      function() {
        //单击图形后的操作
        _this.currUUID = this.getAttr("uuid");
        _this.mouseClickedGraph = this;
      },
      function(e, obj, prev) {
        //鼠标移动到图形上的操作
        //如果是监区对象拖拽的情况下设置图形和对象的关系
        if (_this.startDragNode) {
          let uuid = obj.data.__gohashid;
          _this.startDragNode = false;
          _this.mouseOveredGraph = this;
          // let clientRect = this.getClientRect();
          let treeType = _this.draggingNode.data.type;
          let pri_name = _this.draggingNode.data.name;
          let pri_code = _this.draggingNode.data.pri_code;
          let angle = _this.draggingNode.data.angle;

          if (_this.relationships[uuid] == undefined) {
            if (treeType == "camera") {
              _this.$message({
                type: "info",
                message: "请先添加区域"
              });
              return false;
            }
            _this.relationships[uuid] = {
              area: _this.draggingNode,
              cameras: {}
            };
            _this.$message({
              type: "success",
              message: "关联成功!"
            });
          } else {
            if (treeType == "camera") {
              _this.relationships[uuid]["cameras"][pri_code] =
                _this.draggingNode;
              let addedCameras = Object.keys(
                _this.relationships[uuid]["cameras"]
              );
              // _this.drawObj.drawCamera({
              //   x:
              //     clientRect.x +
              //     (_this.cameraImg.width + 10) * addedCameras.length,
              //   y: clientRect.y + 10,
              //   uuid: uuid,
              //   angle: angle,
              //   image: _this.cameraImg
              // });
            } else {
              _this
                .$confirm(
                  "当前区域已经和图形关联，当前操作会替换已有关联关系，并删除已关联的摄像头，是否继续?",
                  "提示",
                  {
                    confirmButtonText: "确定",
                    cancelButtonText: "取消",
                    type: "warning"
                  }
                )
                .then(() => {
                  let pre_pri_code =
                    _this.relationships[uuid]["area"]["data"]["pri_code"];
                  _this.deleteNodeRelationed(
                    _this.PrisonareaObjtree,
                    pre_pri_code
                  );
                  _this.PrisonareaObjtree = JSON.parse(
                    JSON.stringify(_this.PrisonareaObjtree)
                  );

                  _this.relationships[uuid] = {
                    area: _this.draggingNode,
                    cameras: {}
                  };

                  _this.$message({
                    type: "success",
                    message: "关联成功!"
                  });
                })
                .catch(() => {
                  _this.$message({
                    type: "info",
                    message: "已取消操作"
                  });
                });
            }
          }

          // if (treeType != "camera") {
          //   _this.drawObj.addText(
          //     pri_name,
          //     uuid,
          //     clientRect.x,
          //     clientRect.y,
          //     canvasContainerRect.top,
          //     canvasContainerRect.left
          //   );
          // }

          //设置当前节点数据
          _this.setNodeRelationed(_this.PrisonareaObjtree, pri_code, uuid);
          _this.PrisonareaObjtree = JSON.parse(
            JSON.stringify(_this.PrisonareaObjtree)
          );
        }
      }
    );
    this.cameraImg.src = camera0;
  }
};
</script>

<style scoped>
.h {
  height: 50px;
  line-height: 50px;
  border-bottom: 1px solid #e0e3ec;
}

img {
  cursor: pointer;
}

.aside-l {
  width: 18%;
}

.aside-r {
  width: 82%;
}

.aside-l-h {
  padding: 0 10%;
  border-right: 1px solid #e0e3ec;
}

.aside-l.fl.inbl {
  background: #ffffff;
}

.left-tree {
  margin-top: 20px;
}

.aside-l-h .l {
  width: 40%;
}

.aside-l-h .r {
  width: 57%;
}

.aside-l-h .l img {
  margin-right: 15px;
}

.aside-l-h .r img {
  margin-left: 12px;
}

.aside-r-h-l {
  margin-left: 47px;
  width: 66%;
}

.aside-r-h-l .l {
  width: 50%;
}

.aside-r-h-l .r {
  width: 50%;
}

.aside-r-h-l .l img,
.aside-r-h-l .r img {
  width: 15px;
  height: 15px;
}

.aside-r-h-l .l img {
  margin-right: 29px;
}

.aside-r-h-l .r img {
  margin-left: 20px;
}

.aside-r-h-r {
  margin-right: 34px;
}

.main {
  padding: 20px 2% 5%;
}

.main .actionImage {
  min-height: 500px;
  background: #fff;
  width: 100%;
  filter: "progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod='scale')";
  -moz-background-size: 100% 100%;
  background-size: 100% 100%;
}

.h-line {
  font-size: 14px;
  font-weight: 400;
  color: #59c4ee;
}

.h-line:after {
  width: 89%;
}

.camera-list {
  padding: 15px 0;
}

.camera-list > span {
  margin-right: 19px;
}

.camera-list > span > .name {
  font-size: 14px;
  font-weight: 400;
  color: #333333;
}

.camera-list > span > .icon > img {
  width: 18px;
  height: 14px;
}

.main .l {
  width: 66%;
}

.main .r {
  width: 342px;
}

.main .r .t,
.main .r .d {
  border: 1px solid #e0e3ec;
  padding: 37px 97px 31px 44px;
  color: #666666;
  font-size: 14px;
  font-weight: 400;
}

.main .r .t {
  margin-bottom: 30px;
}

.main .r .d p {
  margin-bottom: 10px;
}

.main .r .line-word > p > b {
  color: #333333;
  font-size: 14px;
  font-weight: 400;
}

.main .r .line-word > p > .value {
  margin-left: 35px;
}

.text-color-wrap {
  position: relative;
}

.color-picker-drop {
}
</style>
<style>
.el-color-picker {
  position: absolute;
  left: 0;
  opacity: 0;
}

.el-color-picker__color-inner {
  background-color: #e0e3ec !important;
}

.el-color-picker__trigger {
  border: none;
}
</style>
